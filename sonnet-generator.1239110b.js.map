{"version":3,"sources":["utils.js","index.js"],"names":["random","min","max","Math","floor","randomElement","array","length","capitalize","string","charAt","toUpperCase","slice","whiteSpace","numberOfWords","maxWordsPerLine","fetch","window","location","origin","then","res","json","ngrams","keys","Object","filter","word","includes","currentWord","document","getElementById","innerHTML","poem","line","i","possibleWords"],"mappings":";AAKO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,cAAA,QAAA,YAAA,EALA,IAAMA,EAAS,SAACC,EAAKC,GAAQC,OAAAA,KAAKC,MAAMD,KAAKH,SAAWE,GAAOD,GAK/D,QAAA,OAAA,EAHA,IAAMI,EAAgB,SAAAC,GAC3BA,OAAAA,EAAMH,KAAKC,MAAMD,KAAKH,SAAWM,EAAMC,UAElC,QAAA,cAAA,EAAA,IAAMC,EAAa,SAAAC,GACxBA,OAAAA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IADzC,QAAA,WAAA;;ACCP,aANA,IAAA,EAAA,QAAA,WAEMC,EAAa,CAAC,IAAK,IAAK,KAAM,IAAK,IAAK,MACxCC,EAAgB,IAChBC,EAAkB,GAExBC,MAASC,GAAAA,OAAAA,OAAOC,SAASC,OAAzB,iBACGC,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GACEC,IAAAA,EAAOC,OAAOD,KAAKD,GAAQG,OAC/B,SAAAC,GAAQ,OAAC,GAAId,OAAAA,EAAY,CAAA,KAAM,QAAOe,SAASD,KAG7CE,EAAcL,GAAK,EAAO,EAAA,QAAA,EAAGA,EAAKjB,SACtCuB,SAASC,eAAe,SAASC,UAAYH,EAKxC,IAHDI,IAAAA,EAAO,GACPC,EAAO,GAEFC,EAAI,EAAGA,EAAIrB,EAAeqB,IAAK,CAChCC,IAAAA,EAAgBb,EAAOM,GACzBO,IACQ,IAAND,IAEFD,IAAQ,EAAWL,EAAAA,YAAAA,KAGrBA,GAAc,EAAcO,EAAAA,eAAAA,MAEtBvB,EAAWe,SAASC,GAGtBK,GAAcL,EAEdK,EAAOA,EAAO,IAAML,EAGlBK,EAAK3B,OAASQ,IAChBkB,GAAQC,EAAO,QACfA,EAAO,MAOfD,GAAQC,EAERJ,SAASC,eAAe,QAAQC,UAAYC","file":"sonnet-generator.1239110b.js","sourceRoot":"..","sourcesContent":["export const random = (min, max) => Math.floor(Math.random() * max) + min;\n\nexport const randomElement = array =>\n  array[Math.floor(Math.random() * array.length)];\n\nexport const capitalize = string =>\n  string.charAt(0).toUpperCase() + string.slice(1);\n","import { random, randomElement, capitalize } from './utils';\n\nconst whiteSpace = ['.', ',', '\\n', ';', ':', '--'];\nconst numberOfWords = 200;\nconst maxWordsPerLine = 80;\n\nfetch(`${window.location.origin}/ngrams.json`)\n  .then(res => res.json())\n  .then(ngrams => {\n    const keys = Object.keys(ngrams).filter(\n      word => ![...whiteSpace, 'an', 'the'].includes(word)\n    );\n\n    let currentWord = keys[random(0, keys.length)];\n    document.getElementById('title').innerHTML = currentWord;\n\n    let poem = '';\n    let line = '';\n\n    for (let i = 0; i < numberOfWords; i++) {\n      const possibleWords = ngrams[currentWord];\n      if (possibleWords) {\n        if (i === 0) {\n          // Capitalize first word in poem\n          line += capitalize(currentWord);\n        }\n\n        currentWord = randomElement(possibleWords);\n        if (currentWord) {\n          if (whiteSpace.includes(currentWord)) {\n            // Join white space chars without space\n\n            line = line + currentWord;\n          } else {\n            line = line + ' ' + currentWord;\n          }\n\n          if (line.length > maxWordsPerLine) {\n            poem += line + '<br/>';\n            line = '';\n          }\n        }\n      }\n    }\n\n    // Adding last line\n    poem += line;\n\n    document.getElementById('poem').innerHTML = poem;\n  });\n"]}